// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.12
// source: chat/v1/chat.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatAddConsumer = "/helloworld.v1.Chat/AddConsumer"
const OperationChatCreateConsumerGroup = "/helloworld.v1.Chat/CreateConsumerGroup"
const OperationChatCreateStream = "/helloworld.v1.Chat/CreateStream"
const OperationChatSayHello = "/helloworld.v1.Chat/SayHello"

type ChatHTTPServer interface {
	AddConsumer(context.Context, *AddConsumerRequest) (*AddConsumerReply, error)
	CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupReply, error)
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamReply, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.GET("/test/{name}", _Chat_SayHello0_HTTP_Handler(srv))
	r.POST("/createConsumerGroup", _Chat_CreateConsumerGroup0_HTTP_Handler(srv))
	r.POST("/createStream", _Chat_CreateStream0_HTTP_Handler(srv))
	r.POST("/addConsumer", _Chat_AddConsumer0_HTTP_Handler(srv))
}

func _Chat_SayHello0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_CreateConsumerGroup0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConsumerGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatCreateConsumerGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConsumerGroup(ctx, req.(*CreateConsumerGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConsumerGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_CreateStream0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStreamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatCreateStream)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStream(ctx, req.(*CreateStreamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStreamReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_AddConsumer0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddConsumerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatAddConsumer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddConsumer(ctx, req.(*AddConsumerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddConsumerReply)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	AddConsumer(ctx context.Context, req *AddConsumerRequest, opts ...http.CallOption) (rsp *AddConsumerReply, err error)
	CreateConsumerGroup(ctx context.Context, req *CreateConsumerGroupRequest, opts ...http.CallOption) (rsp *CreateConsumerGroupReply, err error)
	CreateStream(ctx context.Context, req *CreateStreamRequest, opts ...http.CallOption) (rsp *CreateStreamReply, err error)
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) AddConsumer(ctx context.Context, in *AddConsumerRequest, opts ...http.CallOption) (*AddConsumerReply, error) {
	var out AddConsumerReply
	pattern := "/addConsumer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatAddConsumer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...http.CallOption) (*CreateConsumerGroupReply, error) {
	var out CreateConsumerGroupReply
	pattern := "/createConsumerGroup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatCreateConsumerGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...http.CallOption) (*CreateStreamReply, error) {
	var out CreateStreamReply
	pattern := "/createStream"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatCreateStream))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/test/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
