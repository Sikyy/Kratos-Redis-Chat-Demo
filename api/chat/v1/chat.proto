syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";

option go_package = "Redis-chat/api/helloworld/v1;v1";

service Chat {
  
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      get: "api/test/{name}"
    };
  }

  rpc CreateConsumerGroup (CreateConsumerGroupRequest) returns (CreateConsumerGroupReply) {
    option (google.api.http) = {
      post: "api/createConsumerGroup"
      body: "*"
    };
  }

  rpc CreateStream (CreateStreamRequest) returns (CreateStreamReply) {
    option (google.api.http) = {
      post: "api/createStream"
      body: "*"
    };
  }

  rpc DelConsumerGroup (DelConsumerGroupRequest) returns (DelConsumerGroupReply) {
    option (google.api.http) = {
      post: "api/delConsumerGroup"
      body: "*"
    };
  }

  rpc AddConsumer (AddConsumerRequest) returns (AddConsumerReply) {
    option (google.api.http) = {
      post: "api/addConsumer"
      body: "*"
    };
  }

  rpc DelConsumer (DelConsumerRequest) returns (DelConsumerReply) {
    option (google.api.http) = {
      post: "api/delConsumer"
      body: "*"
    };
  }
  //订阅主题
  rpc Subscribe (SubscribeRequest) returns (SubscribeReply) {
    option (google.api.http) = {
      post: "api/subscribe"
      body: "*"
    };
  }
  //发送消息/如果主题不存在，则自动创建主题
  rpc SendMessage (SendMessageRequest) returns (SendMessageReply) {
    option (google.api.http) = {
      post: "api/sendMessage"
      body: "*"
    };
  }
  rpc Login (LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "api/login/{username}"
      body: "*"
    };
  }
  rpc Logout (LogoutRequest) returns (LogoutReply) {
    option (google.api.http) = {
      post: "api/logout/{username}"
      body: "*"
    };
  }
  rpc GetSetPeopleNum (GetSetPeopleNumRequest) returns (GetSetPeopleNumReply) {
    option (google.api.http) = {
      post: "api/getSetPeopleNum"
      body: "*"
    };
  }
  rpc GetSetPeople (GetSetPeopleRequest) returns (GetSetPeopleReply) {
    option (google.api.http) = {
      post: "api/getSetPeople"
      body: "*"
    };
  }
}

message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message CreateConsumerGroupRequest {
  string stream = 1;//stream名称
  string consumergroupname = 2;//消费者组名称
}

message CreateConsumerGroupReply {
  bool success = 1;             // 是否成功
  string message = 2;           // 提示消息
  string stream = 3;            // 创建的所属流名称
  string consumergroupname = 4; // 创建的消费者组名称
}

message DelConsumerGroupRequest {
  string stream = 1;//stream名称
  string consumergroupname = 2;//消费者组名称
}

message DelConsumerGroupReply {
  bool success = 1;             // 是否成功
  string message = 2;           // 提示消息
  string stream = 3;            // 删除的所属流名称
  string consumergroupname = 4; // 删除的消费者组名称
}

message CreateStreamRequest {
  string stream = 1;//stream名称
  string key = 2;//stream的key
  string value = 3;//stream的value
}

message CreateStreamReply {
  string stream = 1;//stream名称
  string key = 2;//stream的key
  string value = 3;//stream的value
}

message AddConsumerRequest {
  string stream = 1;           //stream名称
  string consumergroupname = 2;//消费者组名称
  string consumername = 3;     //消费者名称
}

message AddConsumerReply {
  bool success = 1;             // 是否成功
  string message = 2;           // 提示消息
  string stream = 3;            // 属于的流名称
  string consumergroupname = 4; // 属于的消费者组名称
  string consumername = 5;      // 创建的消费者名称
}

message DelConsumerRequest {
  string stream = 1;           //stream名称
  string consumergroupname = 2;//消费者组名称
  string consumername = 3;     //消费者名称
}

message DelConsumerReply {
  bool success = 1;             // 是否成功
  string message = 2;           // 提示消息
  string stream = 3;            // 属于的流名称
  string consumergroupname = 4; // 属于的消费者组名称
  string consumername = 5;      // 创建的消费者名称
}

//订阅主题
message SubscribeRequest { 
  string topic = 1;//主题名称
}

message SubscribeReply {
  string topic = 1;//主题名称
  string message = 2;//消息内容
}

//发送消息，使用Pub/Sub 模型，发送消息到指定的主题，如果主题不存在，则自动创建主题
message SendMessageRequest { 
  string topic = 1;//主题名称
  string message = 2;//消息内容
}

message SendMessageReply {
  string topic = 1;//主题名称
  string username = 2;//发送者名称
  string message = 3;//消息内容
  bool success = 4;//是否成功
}

message LoginRequest {
  string username = 1;//用户名
  string setname = 2;//集合名称
}

message LoginReply {
  string username = 1;//用户名
  string setname = 2;//集合名称
  bool success = 3;//是否成功
  string message = 4;//消息内容
}

message LogoutRequest {
  string username = 1;//用户名
  string setname = 2;//集合名称
}

message LogoutReply {
  string username = 1;//用户名
  string setname = 2;//集合名称
  bool success = 3;//是否成功
  string message = 4;//消息内容
}

message GetSetPeopleNumRequest {
  string setname = 1;//集合名称
}

message GetSetPeopleNumReply {
  string setname = 1;//集合名称
  int64 num = 2;//集合人数
  string message = 3;//消息内容
}

message GetSetPeopleRequest {
  string setname = 1;//集合名称
}

message GetSetPeopleReply {
  string setname = 1;//集合名称
  repeated string people = 2;//集合人员
  string message = 3;//消息内容
}


